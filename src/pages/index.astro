---
import About from "@components/About.astro";
import Contact from "@components/Contact.astro";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import Introduction from "@components/Introduction.astro";
import Layout from "@layouts/Layout.astro";
import PageControls from "@components/PageControls.astro";
import PageError from "@components/PageError.astro";
import PageLoad from "@components/PageLoad.astro";
import Skills from "@components/Skills.astro";
import Work from "@components/Work.astro";
import { EMPTY_DATA, getContent } from "@utils/index";
import json from "@root/package.json";

const contactAPI = import.meta.env.CONTACT_API;
const contentAPI = import.meta.env.CONTENT_API;
const data = import.meta.env.DATA ?? EMPTY_DATA;
const domain = import.meta.env.DOMAIN;
const environment = import.meta.env.ENVIRONMENT;
const mailToEmail = import.meta.env.FOOTER_MAILTO_EMAIL;
const version = json.version;

const { abouts, skills, works } =
  environment === "dev" ? JSON.parse(data) : await getContent(contentAPI);
---

<Layout title="Professional Website" name="Luis">
  <PageLoad />
  <PageError mailToEmail={mailToEmail} />
  <PageControls />
  <Header domain={domain} />
  <Introduction name="Luis" title="full stack developer" />
  <Skills skills={skills} />
  <About abouts={abouts} />
  <Work works={works} />
  <Contact contactAPI={contactAPI} />
  <Footer mailToEmail={mailToEmail} version={version} />
</Layout>

<script>
  import {
    buildThresholdList,
    debounce,
    getObserver,
    updateUrlHash,
  } from "@utils/index";

  const commentBtn = document.querySelector<HTMLButtonElement>(".comment");
  const debounceUpdateUrlHash = debounce(updateUrlHash, 250);
  const sections = document.querySelectorAll<HTMLElement>("section");
  const handleIntersect = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry: IntersectionObserverEntry) => {
      const sectionId = entry.target.id;

      if (entry.isIntersecting && entry.intersectionRatio > 0.3) {
        if (sectionId) {
          const allLinks = document.querySelectorAll("nav a");
          const navLink = document.querySelector(
            `nav a[href*=${sectionId}]`
          );

          allLinks.forEach((link) => link.removeAttribute("aria-current"));
          navLink?.setAttribute("aria-current", "page");
        }

        if (sectionId === "home") {
          debounceUpdateUrlHash("");
        } else {
          debounceUpdateUrlHash(sectionId);
        }

        if (sectionId === "services") {
          entry.target.classList.add("animate-in");
        }

        if (sectionId === "contact" && commentBtn) {
          commentBtn.classList.add("animate-out");
        }
      } else {
        if (sectionId === "contact" && commentBtn) {
          commentBtn.classList.remove("animate-out");
        }
      }
    });
  };
  const options = {
    root: document.querySelector("main"),
    rootMargin: "0px",
    threshold: buildThresholdList(),
  };

  sections.forEach((section) => {
    const observer = getObserver(handleIntersect, options);
    observer.observe(section);
  });

  // Update style based on scroll position
  const main = document.querySelector<HTMLElement>("main");
  main?.addEventListener("scroll", (e: Event) => {
    const main = e.target as HTMLElement;
    const isScrolled =
      main.classList.contains && main.classList.contains("scrolled");
    const scrollY = typeof main.scrollTop === "number" && main.scrollTop;

    // Style change to Header
    if (scrollY > 100) {
      if (!isScrolled) main.classList.add("scrolled");
    } else {
      if (isScrolled) main.classList.remove("scrolled");
    }
  });

  setTimeout(() => {
    const pageLoading = document.querySelector(".page-loading");

    if (pageLoading) {
      pageLoading.classList.add("hide");
    }
  }, 150);
</script>
