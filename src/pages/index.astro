---
import Layout from "@layouts/Layout.astro";
import PageLoad from "@components/PageLoad.astro";
import PageError from "@components/PageError.astro";
import PageControls from "@components/PageControls.astro";
import Header from "@components/Header";
import Introduction from "@components/Introduction.astro";
import Skills from "@components/Skills.astro";
import About from "@components/About.astro";
import Work from "@components/Work";
import Contact from "@components/Contact";
import Footer from "@components/Footer.astro";

const contactAPI = import.meta.env.CONTACT_API;
const contentAPI = import.meta.env.CONTENT_API;
const domain = import.meta.env.DOMAIN;
const environment = import.meta.env.ENVIRONMENT;
const mailToEmail = import.meta.env.FOOTER_MAILTO_EMAIL || "";

let works;
if (environment === "dev") {
  works = JSON.parse(import.meta.env.WORKS || {});
} else {
  const api = new URL(contentAPI);
  api.search = new URLSearchParams({ ct: "works" }).toString();
  const response = await fetch(api.toString());

  works = await response.json();
}
---

<Layout title="Professional Website" name="Luis">
  <PageLoad />
  <PageError mailToEmail={mailToEmail} />
  <PageControls />
  <Header domain={domain} client:load />
  <Introduction name="Luis" title="full-stack developer" />
  <Skills />
  <About />
  <Work works={works} client:load />
  <Contact contactAPI={contactAPI} client:load />
  <Footer mailToEmail={mailToEmail} />
</Layout>

<script>
  import { buildThresholdList, getObserver, updateUrlHash } from "@utils/index";

  const sections =
    document.querySelectorAll<HTMLTableSectionElement>("section");
  const commentBtn = document.querySelector<HTMLButtonElement>(".comment");
  const handleIntersect = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry: IntersectionObserverEntry) => {
      const sectionId = entry.target.id;

      if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
        if (sectionId === "home") {
          updateUrlHash("");
        } else {
          updateUrlHash(sectionId);
        }

        if (sectionId === "contact" && commentBtn) {
          commentBtn.classList.add("animate-out");
        }
      } else {
        if (sectionId === "contact" && commentBtn) {
          commentBtn.classList.remove("animate-out");
        }
      }
    });
  };
  const options = {
    root: null,
    rootMargin: "0px",
    threshold: buildThresholdList(),
  };

  sections.forEach((section) => {
    const observer = getObserver(handleIntersect, options);
    observer.observe(section);
  });

  // Update style based on scroll position
  window.addEventListener("scroll", () => {
    const isScrolled =
      document.body.classList.contains &&
      document.body.classList.contains("scrolled");
    const scrollY = typeof window.scrollY === "number" && window.scrollY;

    // Style change to Header
    if (scrollY > 100) {
      if (!isScrolled) document.body.classList.add("scrolled");
    } else {
      if (isScrolled) document.body.classList.remove("scrolled");
    }
  });

  setTimeout(() => {
    const pageLoading = document.querySelector(".page-loading");

    if (pageLoading) {
      pageLoading.classList.add("hide");
    }
  }, 150);
</script>
